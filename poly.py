"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <Cesar Dao Corado> and <Vinay Devarakonda>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: cad4837
UT EID 2: vd6965
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        if coeff == 0:
            return
        new_node = Node(coeff, exp)
        if self.head is None or exp > self.head.exp:
            new_node.next = self.head
            self.head = new_node
        else:
            previous_term = None
            current_term = self.head
            while current_term and current_term.exp >= exp:
                if current_term.exp == exp:
                    current_term.coeff += coeff
                    if current_term.coeff == 0:
                        if previous_term:
                            previous_term.next = current_term.next
                        else:
                            self.head = current_term.next
                    return
                previous_term = current_term
                current_term = current_term.next
            new_node.next = current_term
            previous_term.next = new_node


    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        resulting_polynomial = LinkedList()
        current_head = self.head
        current_p = p.head
        while current_head or current_p:
            if current_head is None:
                resulting_polynomial.insert_term(current_p.coeff, current_p.exp)
                current_p = current_p.next
            elif current_p is None:
                resulting_polynomial.insert_term(current_head.coeff, current_head.exp)
                current_head = current_head.next
            else:
                if current_head.exp == current_p.exp:
                    coeff_sum = current_head.coeff + current_p.coeff
                    if coeff_sum != 0:
                        resulting_polynomial.insert_term(coeff_sum, current_head.exp)
                    current_p = current_p.next
                    current_head = current_head.next
                elif current_head.exp > current_p.exp:
                    resulting_polynomial.insert_term(current_head.coeff, current_head.exp)
                    current_head = current_head.next
                elif current_head.exp < current_p.exp:
                    resulting_polynomial.insert_term(current_p.coeff, current_p.exp)
                    current_p = current_p.next
                else:
                    current_head = current_head.next
                    current_p = current_p.next
        return resulting_polynomial



    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        resulting_polynomial = LinkedList()
        current_head = self.head
        while current_head is not None:
            current_p = p.head
            while current_p is not None:
                coeff = current_head.coeff * current_p.coeff
                exp = current_head.exp + current_p.exp
                resulting_polynomial.insert_term(coeff, exp)
                current_p = current_p.next
            current_head = current_head.next
        return resulting_polynomial

    # Return a string representation of the polynomial.
    def __str__(self):
        terms = []
        current_term = self.head
        while current_term:
            terms.append(f"({current_term.coeff}, {current_term.exp})")
            current_term = current_term.next
        return " + ".join(terms)


def main():
    # read data from stdin (terminal/file) using input() and create polynomial p
    p = LinkedList()
    n_terms = int(input())
    for _ in range(n_terms):
        line = input().strip().split()
        coeff = int(line[0])
        exp = int(line[1])
        p.insert_term(coeff, exp)
    while True:
        line = input()
        if line.strip() == "":
            break

    # read data from stdin (terminal/file) using input() and create polynomial q
    q = LinkedList()
    n_terms_2 = int(input())
    for _ in range(n_terms_2):
        line = input().strip().split()
        coeff = int(line[0])
        exp = int(line[1])
        q.insert_term(coeff, exp)
    # get sum of p and q as a new linked list and print sum
    pq_sum = p.add(q)
    print(pq_sum)

    # get product of p and q as a new linked list and print product
    product = p.mult(q)
    print(product)


if __name__ == "__main__":
    main()


if __name__ == "__main__":
    main()